/* Auto-generated by genmsg_cpp for file /home/ardrone/ros_workspace/mdb_drone/msg/chatter.msg */
#ifndef MDB_DRONE_MESSAGE_CHATTER_H
#define MDB_DRONE_MESSAGE_CHATTER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mdb_drone
{
template <class ContainerAllocator>
struct chatter_ {
  typedef chatter_<ContainerAllocator> Type;

  chatter_()
  : msg(0)
  {
  }

  chatter_(const ContainerAllocator& _alloc)
  : msg(0)
  {
  }

  typedef uint8_t _msg_type;
  uint8_t msg;


  typedef boost::shared_ptr< ::mdb_drone::chatter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mdb_drone::chatter_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct chatter
typedef  ::mdb_drone::chatter_<std::allocator<void> > chatter;

typedef boost::shared_ptr< ::mdb_drone::chatter> chatterPtr;
typedef boost::shared_ptr< ::mdb_drone::chatter const> chatterConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mdb_drone::chatter_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mdb_drone::chatter_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mdb_drone

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mdb_drone::chatter_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mdb_drone::chatter_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mdb_drone::chatter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb49cab3792a4224ca6b01f0d7099286";
  }

  static const char* value(const  ::mdb_drone::chatter_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb49cab3792a4224ULL;
  static const uint64_t static_value2 = 0xca6b01f0d7099286ULL;
};

template<class ContainerAllocator>
struct DataType< ::mdb_drone::chatter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mdb_drone/chatter";
  }

  static const char* value(const  ::mdb_drone::chatter_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mdb_drone::chatter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 msg\n\
\n\
";
  }

  static const char* value(const  ::mdb_drone::chatter_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mdb_drone::chatter_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mdb_drone::chatter_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct chatter_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mdb_drone::chatter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mdb_drone::chatter_<ContainerAllocator> & v) 
  {
    s << indent << "msg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MDB_DRONE_MESSAGE_CHATTER_H

