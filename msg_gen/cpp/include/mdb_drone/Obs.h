/* Auto-generated by genmsg_cpp for file /home/ardrone/ros_workspace/mdb_drone/msg/Obs.msg */
#ifndef MDB_DRONE_MESSAGE_OBS_H
#define MDB_DRONE_MESSAGE_OBS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mdb_drone
{
template <class ContainerAllocator>
struct Obs_ {
  typedef Obs_<ContainerAllocator> Type;

  Obs_()
  : msg_z_hat(0.0)
  {
  }

  Obs_(const ContainerAllocator& _alloc)
  : msg_z_hat(0.0)
  {
  }

  typedef float _msg_z_hat_type;
  float msg_z_hat;


  typedef boost::shared_ptr< ::mdb_drone::Obs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mdb_drone::Obs_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Obs
typedef  ::mdb_drone::Obs_<std::allocator<void> > Obs;

typedef boost::shared_ptr< ::mdb_drone::Obs> ObsPtr;
typedef boost::shared_ptr< ::mdb_drone::Obs const> ObsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mdb_drone::Obs_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mdb_drone::Obs_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mdb_drone

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mdb_drone::Obs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mdb_drone::Obs_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mdb_drone::Obs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a133b612fe54b4bd455c20b8fba7e786";
  }

  static const char* value(const  ::mdb_drone::Obs_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa133b612fe54b4bdULL;
  static const uint64_t static_value2 = 0x455c20b8fba7e786ULL;
};

template<class ContainerAllocator>
struct DataType< ::mdb_drone::Obs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mdb_drone/Obs";
  }

  static const char* value(const  ::mdb_drone::Obs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mdb_drone::Obs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 msg_z_hat\n\
\n\
";
  }

  static const char* value(const  ::mdb_drone::Obs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mdb_drone::Obs_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mdb_drone::Obs_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg_z_hat);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Obs_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mdb_drone::Obs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mdb_drone::Obs_<ContainerAllocator> & v) 
  {
    s << indent << "msg_z_hat: ";
    Printer<float>::stream(s, indent + "  ", v.msg_z_hat);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MDB_DRONE_MESSAGE_OBS_H

